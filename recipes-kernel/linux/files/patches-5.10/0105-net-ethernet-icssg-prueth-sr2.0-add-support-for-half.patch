From 28fb593faa2c49b134f2597b4b4e45bfa6db72d0 Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Tue, 12 Oct 2021 13:54:43 +0300
Subject: [PATCH 105/150] net: ethernet: icssg-prueth: sr2.0: add support for
 half duplex operation

This patch adds support for half duplex operation at 10M and 100M link
speeds for AM654x ICSS-G SR2.0 devices.
- Driver configures rand_seed, a random number, in DMEM HD_RAND_SEED_OFFSET
field, which will be used by firmware for Back off time calculation.
- Driver informs FW about half duplex link operation in DMEM
PORT_LINK_SPEED_OFFSET field by setting bit 7 for 10/100M HD.

Hence, the half duplex operation depends on board design the
"ti,half-duplex-capable" property has to be enabled for ICSS-G ports if HW
is capable to perform half duplex.

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
---
 drivers/net/ethernet/ti/icssg_config.c     | 30 ++++++++++++++++++++++
 drivers/net/ethernet/ti/icssg_prueth.c     | 11 +-------
 drivers/net/ethernet/ti/icssg_prueth.h     |  2 ++
 drivers/net/ethernet/ti/icssg_switch_map.h |  3 +++
 4 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/ti/icssg_config.c b/drivers/net/ethernet/ti/icssg_config.c
index 1a4b0acb5660..faa9855f03bf 100644
--- a/drivers/net/ethernet/ti/icssg_config.c
+++ b/drivers/net/ethernet/ti/icssg_config.c
@@ -434,6 +434,9 @@ void icssg_config_set_speed(struct prueth_emac *emac)
 {
 	u8 fw_speed;
 
+	if (emac->is_sr1)
+		return;
+
 	switch (emac->speed) {
 	case SPEED_1000:
 		fw_speed = FW_LINK_SPEED_1G;
@@ -450,5 +453,32 @@ void icssg_config_set_speed(struct prueth_emac *emac)
 		return;
 	}
 
+	if (emac->duplex == DUPLEX_HALF)
+		fw_speed |= FW_LINK_SPEED_HD;
+
 	writeb(fw_speed, emac->dram.va + PORT_LINK_SPEED_OFFSET);
 }
+
+static void icssg_config_half_duplex_sr1(struct prueth_emac *emac)
+{
+	int slice = prueth_emac_slice(emac);
+	struct icssg_config_sr1 *config;
+	u32 val = get_random_int();
+	void __iomem *va;
+
+	va = emac->prueth->shram.va + slice * ICSSG_CONFIG_OFFSET_SLICE1;
+	config = (struct icssg_config_sr1 *)va;
+
+	writel(val, &config->rand_seed);
+}
+
+void icssg_config_half_duplex(struct prueth_emac *emac)
+{
+	u32 val;
+
+	if (emac->is_sr1)
+		icssg_config_half_duplex_sr1(emac);
+
+	val = get_random_int();
+	writel(val, emac->dram.va + HD_RAND_SEED_OFFSET);
+}
diff --git a/drivers/net/ethernet/ti/icssg_prueth.c b/drivers/net/ethernet/ti/icssg_prueth.c
index c4ee86bb9f99..3f24b848cf60 100644
--- a/drivers/net/ethernet/ti/icssg_prueth.c
+++ b/drivers/net/ethernet/ti/icssg_prueth.c
@@ -1232,15 +1232,6 @@ static void prueth_emac_stop(struct prueth_emac *emac)
 	rproc_shutdown(prueth->pru[slice]);
 }
 
-static void icssg_config_half_duplex(struct prueth *prueth, int slice)
-{
-	void __iomem *va = prueth->shram.va + slice * ICSSG_CONFIG_OFFSET_SLICE1;
-	struct icssg_config_sr1 *config = (struct icssg_config_sr1 *)va;
-	u32 val = get_random_int();
-
-	writel(val, &config->rand_seed);
-}
-
 /* called back by PHY layer if there is change in link state of hw port*/
 static void emac_adjust_link(struct net_device *ndev)
 {
@@ -1284,7 +1275,7 @@ static void emac_adjust_link(struct net_device *ndev)
 		 */
 		if (emac->link) {
 			if (emac->duplex == DUPLEX_HALF)
-				icssg_config_half_duplex(prueth, prueth_emac_slice(emac));
+				icssg_config_half_duplex(emac);
 			/* Set the RGMII cfg for gig en and full duplex */
 			icssg_update_rgmii_cfg(prueth->miig_rt, emac);
 
diff --git a/drivers/net/ethernet/ti/icssg_prueth.h b/drivers/net/ethernet/ti/icssg_prueth.h
index ccabdc9f515f..2db6520299a8 100644
--- a/drivers/net/ethernet/ti/icssg_prueth.h
+++ b/drivers/net/ethernet/ti/icssg_prueth.h
@@ -281,6 +281,8 @@ int icssg_config_sr2(struct prueth *prueth, struct prueth_emac *emac,
 int emac_set_port_state(struct prueth_emac *emac,
 			enum icssg_port_state_cmd state);
 void icssg_config_set_speed(struct prueth_emac *emac);
+void icssg_config_half_duplex(struct prueth_emac *emac);
+
 #define prueth_napi_to_tx_chn(pnapi) \
 	container_of(pnapi, struct prueth_tx_chn, napi_tx)
 
diff --git a/drivers/net/ethernet/ti/icssg_switch_map.h b/drivers/net/ethernet/ti/icssg_switch_map.h
index 644a22b53424..99225d0f1582 100644
--- a/drivers/net/ethernet/ti/icssg_switch_map.h
+++ b/drivers/net/ethernet/ti/icssg_switch_map.h
@@ -16,6 +16,7 @@
 #define FW_LINK_SPEED_1G                           (0x00)
 #define FW_LINK_SPEED_100M                         (0x01)
 #define FW_LINK_SPEED_10M                          (0x02)
+#define FW_LINK_SPEED_HD                           (0x80)
 
 /*Time after which FDB entries are checked for aged out values. Value in nanoseconds*/
 #define FDB_AGEING_TIMEOUT_OFFSET                          0x0014
@@ -154,6 +155,8 @@
 #define HOST_RX_Q_PRE_CONTEXT_OFFSET                       0x0684
 /*Buffer for 8 FDB entries to be added by 'Add Multiple FDB entries IOCTL*/
 #define FDB_CMD_BUFFER                                     0x0894
+/*Used by FW to generate random number with the SEED value*/
+#define HD_RAND_SEED_OFFSET                                0x0934
 
 /* Memory Usage of : DMEM1
  *
-- 
2.34.1

