#! /usr/bin/python3
import termios
import os
import tty
import fcntl
import sys
import select
import struct
import re

class TerminalResize:
    """
    python3 has get_terminal size, but it doesn't actually query
    the terminal, just trusts current stty settings, which isn't
    useful here.
    """
    @classmethod
    def resize(cls):
        fd = os.open('/dev/tty', os.O_RDWR | os.O_NOCTTY)
        with open(fd, 'wb+', buffering=0) as ttyfd:
            # Save the terminal state
            fileno = sys.stdin.fileno()
            stty_sav = termios.tcgetattr(sys.stdin)
            fc_sav = fcntl.fcntl(fileno, fcntl.F_GETFL)

            # Turn off echo.
            stty_new = termios.tcgetattr(sys.stdin)
            stty_new[3] = stty_new[3] & ~termios.ECHO
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, stty_new)
            # Getting the size of the actual terminal window
            # Reference:https://wiki.osdev.org/Terminals
            ttyfd.write(b'\033[7\033[r\033[999;999H\033[6n')
            ttyfd.flush()

            # Put stdin into cbreak mode.
            tty.setcbreak(sys.stdin)

            # Nonblocking mode.
            fcntl.fcntl(fileno, fcntl.F_SETFL, fc_sav | os.O_NONBLOCK)

            try:
                while True:
                    r, w, e = select.select([ttyfd], [], [])
                    if r:
                        output = sys.stdin.read()
                        break
            finally:
                # Reset the terminal back to normal cooked mode
                termios.tcsetattr(fileno, termios.TCSAFLUSH, stty_sav)
                fcntl.fcntl(fileno, fcntl.F_SETFL, fc_sav)

            rows, cols = list(map(int, re.findall(r'\d+', output)))

            fcntl.ioctl(ttyfd, termios.TIOCSWINSZ,
                        struct.pack("HHHH", rows, cols, 0, 0))


def main():
    default_console_login = False
    # get the input type
    input_type = os.readlink('/proc/self/fd/0')
    if "ttyS" in input_type or "ttyUSB" in input_type:
        default_console_login = True

    if default_console_login:
        TerminalResize.resize()


if __name__ == '__main__':
    main()
